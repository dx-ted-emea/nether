DECLARE EXTERNAL @YEAR int = 2017;
DECLARE EXTERNAL @MONTH int = 5;
DECLARE EXTERNAL @DAY int = 16;

DECLARE @INPUT_FILE string = String.Concat( "/nether/clustering/geo-location/", @YEAR.ToString(), "/", @MONTH.ToString("D2") , "/", @DAY.ToString("D2"), "/{*}.csv");
DECLARE @OUTPUT_FILE string = String.Concat( "/nether/output/geo-location/", @YEAR.ToString(), @MONTH_STR, @DAY_STR, ".csv");

// Read raw location events
@LOCATIONS_RAW =
    EXTRACT id string,
            type string,
            version string,
            enqueueTime DateTime,
            gameSessionId string,
            lat float,
            lon float,
            geoHash double,
            geoHashPrecision int,
            geoHashCenterlat float,
            geoHashCenterlon float,
            rnd string
    FROM @INPUT_FILE
         USING Extractors.Csv(encoding: Encoding.UTF8, skipFirstNRows: 1);


// Create temporary table with median latitude and row number
@MEDIAN_LAT_COORDS_TMP = 
    SELECT 
        l.enqueueTime.Date AS date,
        l.geoHash AS geoHash, 
        l.lat AS latitude,
        l.lon AS longitude,
        ROW_NUMBER() OVER (PARTITION BY l.geoHash ORDER BY l.lat ASC) AS rowNumber
    FROM @LOCATIONS_RAW AS l
    JOIN
        (SELECT 
            geoHash,
            PERCENTILE_DISC(0.5) WITHIN GROUP ( ORDER BY lat ASC ) OVER ( PARTITION BY geoHash ) AS medianLatitude
        FROM @LOCATIONS_RAW) AS g 
    ON l.geoHash == g.geoHash AND g.medianLatitude == l.lat;

// Table that contains geoHash and its associated coordinates: median latitude and the minimum corresponding longitude
@MEDIAN_COORDS = 
    SELECT
        date,
        geoHash,
        latitude,
        longitude
    FROM @MEDIAN_LAT_COORDS_TMP
    WHERE rowNumber == 1;

// Table with raw counts per geoHash
@RAW_COUNTS = 
    SELECT geoHash,
           COUNT(*) AS numPts
    FROM @LOCATIONS_RAW
    GROUP BY geoHash;

// Table with counts and coordinates per geoHash
@COUNTS =
    SELECT g.date,
           l.geoHash,
           l.numPts,
           g.latitude,
           g.longitude
    FROM @RAW_COUNTS AS l
         JOIN @MEDIAN_COORDS AS g
         ON l.geoHash == g.geoHash;


// Output counts per geoHash and its corresponding coordinates
OUTPUT @COUNTS
TO @OUTPUT_FILE
USING Outputters.Csv();